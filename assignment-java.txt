Princilples of OOP
Inheritance:
------------
------------          

class Calculation{ 
   int C;
   public void addition(int a, int b)
   {
      c=a+b;
      System.out.println("The sum of the given numbers:"+c);
   }
   public void Substraction(int a,int b){
      C=A-B;
      System.out.println("The difference between the given numbers:"+c);
   }
   
}

public class My_Calculation extends Calculation
{    
  
   public void multiplication(int a, int b)
    {
      C=A*B;
      System.out.println("The product of the given numbers:"+C);
     }
   public static void main(String args[])
    {
      int a=20, b=10;
      My_Calculation cal = new My_Calculation();
      cal.addition(a, b);
      cal.Substraction(a, b);
      cal.multiplication(a, b);      
      
     }

}
...........................................
Encapsulation:
--------------
--------------
            
public class Encapculation
{

   private String name;
   private String idNum;
   private int age;

      public int getAge()
        {
      return age;
       }

   public String getName()
      {
      return name;
      }

   public String getIdNum()
     {
      return idNum;
     }

   public void setAge( int newAge)
      {
      age = newAge;
      }

   public void setName(String newName)
      {
      name = newName;
     }

   public void setIdNum( String newId)
      {
      idNum = newId;
      }
 public static void main(String args[])
     {
      Encapsulation encap = new Encapsulation();
      encap.setName("Ahmad");
      encap.setAge(20);
      encap.setIdNum("12343ms");

      System.out.print("Name : " + encap.getName() + " Age : " + encap.getAge());
    }//main end
}//end class
..........................................

 Polymorphisam:
---------------
---------------
 
public class Vehicle
{

    public void move()
     {

    System.out.println(“Vehicles can move”);

    }

}

class MotorBike extends Vehicle
   {

    public void move()
     {

    System.out.println(“MotorBike can move and accelerate too”);

     }

    public static void main(String[] args)
   {

    Vehicle vh=new MotorBike();

    vh.move(); //MotorBike can move and accelerate too

    vh=new Vehicle();

    vh.move();   //print vehicle can move

    }

}


 
.....................................

 ####Abstrcat:
==============
abstract class Bike
   {  
  abstract void run();  
  }  
  
class Honda extends Bike
   {  
void run()
  {
   System.out.println("running safely");
  }  
  
public static void main(String args[])
 {  
 Bike obj = new Honda();  
 obj.run();  
  }  
}//MAIN END
.....................THANKS.........................  